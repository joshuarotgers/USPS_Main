name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          set -euxo pipefail
          TAG="${GITHUB_REF_NAME:-dev}"
          COMMIT="${GITHUB_SHA}"
          BUILT_AT="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          BIN=api
          EXT=""
          if [ "$GOOS" = windows ]; then EXT=.exe; fi
          mkdir -p dist
          go build -trimpath -ldflags "-s -w -X gpsnav/internal/buildinfo.Version=${TAG} -X gpsnav/internal/buildinfo.Commit=${COMMIT} -X gpsnav/internal/buildinfo.BuiltAt=${BUILT_AT}" -o dist/${BIN}${EXT} ./cmd/api

      - name: Package artifact
        run: |
          set -euxo pipefail
          TAG="${GITHUB_REF_NAME:-dev}"
          NAME="gpsnav-api_${TAG}_${{ matrix.goos }}_${{ matrix.goarch }}"
          mkdir -p out
          if [ "${{ matrix.goos }}" = windows ]; then
            zip -j out/${NAME}.zip dist/api.exe
          else
            tar -C dist -czf out/${NAME}.tar.gz api
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.goos }}-${{ matrix.goarch }}
          path: out/*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: false
          generate_release_notes: true
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
          files: |
            artifacts/**/**
