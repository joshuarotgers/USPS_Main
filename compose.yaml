services:
  db:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build: .
    ports:
      - "8081:8080"
    environment:
      PORT: "8080"
      DATABASE_URL: postgres://postgres:postgres@db:5432/postgres?sslmode=disable
      REDIS_URL: redis://redis:6379/0
      AUTH_MODE: dev
      WEBHOOK_MAX_ATTEMPTS: "5"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:v2.54.1
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    volumes:
      - ./configs/prometheus.yml.example:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      api:
        condition: service_started

  grafana:
    image: grafana/grafana:11.3.0
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboard-api.json:/var/lib/grafana/dashboards/dashboard-api.json:ro
      - ./grafana/dashboard-logs.json:/var/lib/grafana/dashboards/dashboard-logs.json:ro
    depends_on:
      prometheus:
        condition: service_started

  loki:
    image: grafana/loki:2.9.0
    command: ["-config.file=/etc/loki/config.yml"]
    ports:
      - "3100:3100"
    volumes:
      - ./configs/loki-config.yml.example:/etc/loki/config.yml:ro
      - loki_data:/loki

  promtail:
    image: grafana/promtail:2.9.0
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log:/var/log:ro
      - ./configs/promtail-config.yml.example:/etc/promtail/config.yml:ro
    depends_on:
      loki:
        condition: service_started

volumes:
  db_data: {}
  prom_data: {}
  grafana_data: {}
  loki_data: {}
